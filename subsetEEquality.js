//         c
//[-2,1,-3,4,-1,2,1,-5,4]
//
// c  1
//m   6
// var maxSubArray = function (nums) {
//   let currentSum = nums[0];
//   let max = nums[0];
//   for (let i = 1; i < nums.length; i++) {
//     currentSum = Math.max(currentSum + nums[i], nums[i]);
//     max = Math.max(currentSum, max);
//   }
//   return max;
// };

/*
var maxSubArray = function(nums) {
if(nums.length === 1) return nums[0];
    //Keep track of max Value
    let maxValue=nums[0];
    //accumulated number
    let accNum=nums[0];
    
    for(let i=1; i<nums.length; i++){
        let calc=Math.max(nums[i],accNum+nums[i]);
        if(calc>maxValue) maxValue=calc
        
        accNum =calc
    }
        
        
      return maxValue;  
};


//time complextiy =O(n)
//space complexity=0(1)
*/
// const arr = [1, 2, 3];

// // const a = arr.toString();
// let result = "";

// for (let a of arr) {
//   result += a;
// }
// console.log(typeof result);
var addToArrayForm = function (num, k) {
  //  debugger;
  let stringNum = "";
  for (let n of num) {
    stringNum += n;
  }
  let abc = Number(stringNum);
  let number = abc + k;
  let result = [];
  for (let n of String(number)) {
    result.push(Number(n));
  }
  return result;
};

let num = [1, 2, 6, 3, 0, 7, 1, 7, 1, 9, 7, 5, 6, 6, 4, 4, 0, 0, 6, 3],
  k = 516;
//console.log(addToArrayForm(num, k));
//console.log(Number("12630717197566440063"));

// let string = "assadfbg";

// for (let s of string) {
//   console.log(s);
// }

// console.log("5" + 3);
// console.log("5" - 3);
// console.log(typeof NaN);
// console.log(typeof null);

// console.log(NaN === NaN);
console.log(1 < 2 < 3);
console.log(3 > 2 > 1);
/* 
You are given a string s consisting only of letters 'a' and 'b'. In a single step you can remove one palindromic subsequence from s.

Return the minimum number of steps to make the given string empty.

A string is a subsequence of a given string if it is generated by deleting some characters of a given string without changing its order. Note that a subsequence does not necessarily need to be contiguous.

A string is called palindrome if is one that reads the same backward as well as forward.

 

Example 1:

Input: s = "ababa"
Output: 1
Explanation: s is already a palindrome, so its entirety can be removed in a single step.
Example 2:

Input: s = "abb"
Output: 2
Explanation: "abb" -> "bb" -> "". 
Remove palindromic subsequence "a" then "bb".
Example 3:

Input: s = "baabb"
Output: 2
Explanation: "baabb" -> "b" -> "". 
Remove palindromic subsequence "baab" then "b".

*/

var removePalindromeSub = function (s) {
  return s === s.split("").reverse().join("") ? 1 : 2;
};
var findMaxAverage = function (nums, k) {
  let sum = 0;
  for (let i = 0; i < k; i++) {
    sum += nums[i];
  }

  let max = sum;
  for (let i = k; i < nums.length; i++) {
    sum = sum - nums[i - k] + nums[i];
    max = Math.max(max, sum);
  }
  return max / k;
};

function findMaxAverage2(nums, k, sum = 0, max = 0) {
  for (let i = 0; i < k; i++) {
    sum += nums[i];
  }
  max = sum / k;
  for (let i = k; i < nums.length; i++) {
    sum += nums[i] - nums[i - k];
    max = Math.max(max, sum / k);
  }
  return max;
}

var findMaxAverage3 = function (nums, k) {
  let averageValue = -Infinity;
  let left = 0;
  let sum = 0;
  for (let right = 0; right < nums.length; right++) {
    sum += nums[right];
    if (right - left + 1 === k) {
      averageValue = Math.max(averageValue, sum / k);

      sum -= nums[left];
      left++;
    }
  }
  return averageValue;
};
//392. Is Subsequence
var isSubsequence = function (s, t) {
  //"abc", t = "ahbgdc"
  // i          j
  let i = 0;
  let j = 0;
  while (i < s.length && j < t.length) {
    if (s[i] === t[j]) {
      i++;
      j++;
    } else {
      j++;
    }
  }
  return i === s.length;
};
